{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { activate, ensureInitialized, fetchConfig, fetchAndActivate, getAll, getBoolean, getNumber, getString, getValue, setLogLevel, isSupported } from '@firebase/remote-config';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass RemoteConfigCompatImpl {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  get defaultConfig() {\n    return this._delegate.defaultConfig;\n  }\n\n  set defaultConfig(value) {\n    this._delegate.defaultConfig = value;\n  }\n\n  get fetchTimeMillis() {\n    return this._delegate.fetchTimeMillis;\n  }\n\n  get lastFetchStatus() {\n    return this._delegate.lastFetchStatus;\n  }\n\n  get settings() {\n    return this._delegate.settings;\n  }\n\n  set settings(value) {\n    this._delegate.settings = value;\n  }\n\n  activate() {\n    return activate(this._delegate);\n  }\n\n  ensureInitialized() {\n    return ensureInitialized(this._delegate);\n  }\n  /**\r\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\r\n   * {@link Settings.fetchTimeoutInSeconds} or\r\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\r\n   */\n\n\n  fetch() {\n    return fetchConfig(this._delegate);\n  }\n\n  fetchAndActivate() {\n    return fetchAndActivate(this._delegate);\n  }\n\n  getAll() {\n    return getAll(this._delegate);\n  }\n\n  getBoolean(key) {\n    return getBoolean(this._delegate, key);\n  }\n\n  getNumber(key) {\n    return getNumber(this._delegate, key);\n  }\n\n  getString(key) {\n    return getString(this._delegate, key);\n  }\n\n  getValue(key) {\n    return getValue(this._delegate, key);\n  } // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n\n\n  setLogLevel(logLevel) {\n    setLogLevel(this._delegate, logLevel);\n  }\n\n}\n\nconst name = \"@firebase/remote-config-compat\";\nconst version = \"0.1.10\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction registerRemoteConfigCompat(firebaseInstance) {\n  firebaseInstance.INTERNAL.registerComponent(new Component('remoteConfig-compat', remoteConfigFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true).setServiceProps({\n    isSupported\n  }));\n  firebaseInstance.registerVersion(name, version);\n}\n\nfunction remoteConfigFactory(container, _ref) {\n  let {\n    instanceIdentifier: namespace\n  } = _ref;\n  const app = container.getProvider('app-compat').getImmediate(); // The following call will always succeed because rc `import {...} from '@firebase/remote-config'`\n\n  const remoteConfig = container.getProvider('remote-config').getImmediate({\n    identifier: namespace\n  });\n  return new RemoteConfigCompatImpl(app, remoteConfig);\n}\n\nregisterRemoteConfigCompat(firebase);","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;;MA2BUA,uBAAsB;EAGjCC,WAAmB,MAA2BC,SAA3B,EAAkD;IAAlD,KAAGC,GAAH;IAA2B,KAASD,SAAT;EAA2B;;EAExD,IAAbE,aAAa;IACf,OAAO,KAAKF,SAAL,CAAeE,aAAtB;EACD;;EAEgB,IAAbA,aAAa,CAACC,KAAD,EAAoD;IACnE,KAAKH,SAAL,CAAeE,aAAf,GAA+BC,KAA/B;EACD;;EAEkB,IAAfC,eAAe;IACjB,OAAO,KAAKJ,SAAL,CAAeI,eAAtB;EACD;;EAEkB,IAAfC,eAAe;IACjB,OAAO,KAAKL,SAAL,CAAeK,eAAtB;EACD;;EAEW,IAARC,QAAQ;IACV,OAAO,KAAKN,SAAL,CAAeM,QAAtB;EACD;;EAEW,IAARA,QAAQ,CAACH,KAAD,EAAsB;IAChC,KAAKH,SAAL,CAAeM,QAAf,GAA0BH,KAA1B;EACD;;EAEDI,QAAQ;IACN,OAAOA,QAAQ,CAAC,KAAKP,SAAN,CAAf;EACD;;EAEDQ,iBAAiB;IACf,OAAOA,iBAAiB,CAAC,KAAKR,SAAN,CAAxB;EACD;EAED;;;;AAIG;;;EACHS,KAAK;IACH,OAAOC,WAAW,CAAC,KAAKV,SAAN,CAAlB;EACD;;EAEDW,gBAAgB;IACd,OAAOA,gBAAgB,CAAC,KAAKX,SAAN,CAAvB;EACD;;EAEDY,MAAM;IACJ,OAAOA,MAAM,CAAC,KAAKZ,SAAN,CAAb;EACD;;EAEDa,UAAU,CAACC,GAAD,EAAY;IACpB,OAAOD,UAAU,CAAC,KAAKb,SAAN,EAAiBc,GAAjB,CAAjB;EACD;;EAEDC,SAAS,CAACD,GAAD,EAAY;IACnB,OAAOC,SAAS,CAAC,KAAKf,SAAN,EAAiBc,GAAjB,CAAhB;EACD;;EAEDE,SAAS,CAACF,GAAD,EAAY;IACnB,OAAOE,SAAS,CAAC,KAAKhB,SAAN,EAAiBc,GAAjB,CAAhB;EACD;;EAEDG,QAAQ,CAACH,GAAD,EAAY;IAClB,OAAOG,QAAQ,CAAC,KAAKjB,SAAN,EAAiBc,GAAjB,CAAf;EACD,CApEgC;;;;EAwEjCI,WAAW,CAACC,QAAD,EAA+B;IACxCD,WAAW,CAAC,KAAKlB,SAAN,EAAiBmB,QAAjB,CAAX;EACD;;AA1EgC;;;;AC1CnC;;;;;;;;;;;;;;;AAeG;;AAaH,SAASC,0BAAT,CACEC,gBADF,EACsC;EAEpCA,gBAAgB,CAACC,QAAjB,CAA0BC,iBAA1B,CACE,IAAIC,SAAJ,CACE,qBADF,EAEEC,mBAFF,EAIC;EAAA;EAJD,EAKGC,oBALH,CAKwB,IALxB,EAMGC,eANH,CAMmB;IAAEC;EAAF,CANnB,CADF;EAUAP,gBAAgB,CAACQ,eAAjB,CAAiCC,IAAjC,EAA8CC,OAA9C;AACD;;AAED,SAASN,mBAAT,CACEO,SADF,QAE2D;EAAA,IAAzD;IAAEC,kBAAkB,EAAEC;EAAtB,CAAyD;EAEzD,MAAMjC,GAAG,GAAG+B,SAAS,CAACG,WAAV,CAAsB,YAAtB,EAAoCC,YAApC,EAAZ,CAFyD;;EAIzD,MAAMC,YAAY,GAAGL,SAAS,CAACG,WAAV,CAAsB,eAAtB,EAAuCC,YAAvC,CAAoD;IACvEE,UAAU,EAAEJ;EAD2D,CAApD,CAArB;EAIA,OAAO,IAAIpC,sBAAJ,CAA2BG,GAA3B,EAAgCoC,YAAhC,CAAP;AACD;;AAEDjB,0BAA0B,CAACmB,QAAD,CAA1B","names":["RemoteConfigCompatImpl","constructor","_delegate","app","defaultConfig","value","fetchTimeMillis","lastFetchStatus","settings","activate","ensureInitialized","fetch","fetchConfig","fetchAndActivate","getAll","getBoolean","key","getNumber","getString","getValue","setLogLevel","logLevel","registerRemoteConfigCompat","firebaseInstance","INTERNAL","registerComponent","Component","remoteConfigFactory","setMultipleInstances","setServiceProps","isSupported","registerVersion","packageName","version","container","instanceIdentifier","namespace","getProvider","getImmediate","remoteConfig","identifier","firebase"],"sources":["../../src/remoteConfig.ts","../../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport {\n  Value as ValueCompat,\n  FetchStatus as FetchSTatusCompat,\n  Settings as SettingsCompat,\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig as RemoteConfigCompat\n} from '@firebase/remote-config-types';\nimport {\n  RemoteConfig,\n  setLogLevel,\n  activate,\n  ensureInitialized,\n  fetchAndActivate,\n  fetchConfig,\n  getAll,\n  getBoolean,\n  getNumber,\n  getString,\n  getValue,\n  isSupported\n} from '@firebase/remote-config';\n\nexport { isSupported };\n\nexport class RemoteConfigCompatImpl\n  implements RemoteConfigCompat, _FirebaseService\n{\n  constructor(public app: FirebaseApp, readonly _delegate: RemoteConfig) {}\n\n  get defaultConfig(): { [key: string]: string | number | boolean } {\n    return this._delegate.defaultConfig;\n  }\n\n  set defaultConfig(value: { [key: string]: string | number | boolean }) {\n    this._delegate.defaultConfig = value;\n  }\n\n  get fetchTimeMillis(): number {\n    return this._delegate.fetchTimeMillis;\n  }\n\n  get lastFetchStatus(): FetchSTatusCompat {\n    return this._delegate.lastFetchStatus;\n  }\n\n  get settings(): SettingsCompat {\n    return this._delegate.settings;\n  }\n\n  set settings(value: SettingsCompat) {\n    this._delegate.settings = value;\n  }\n\n  activate(): Promise<boolean> {\n    return activate(this._delegate);\n  }\n\n  ensureInitialized(): Promise<void> {\n    return ensureInitialized(this._delegate);\n  }\n\n  /**\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\n   * {@link Settings.fetchTimeoutInSeconds} or\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\n   */\n  fetch(): Promise<void> {\n    return fetchConfig(this._delegate);\n  }\n\n  fetchAndActivate(): Promise<boolean> {\n    return fetchAndActivate(this._delegate);\n  }\n\n  getAll(): { [key: string]: ValueCompat } {\n    return getAll(this._delegate);\n  }\n\n  getBoolean(key: string): boolean {\n    return getBoolean(this._delegate, key);\n  }\n\n  getNumber(key: string): number {\n    return getNumber(this._delegate, key);\n  }\n\n  getString(key: string): string {\n    return getString(this._delegate, key);\n  }\n\n  getValue(key: string): ValueCompat {\n    return getValue(this._delegate, key);\n  }\n\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  setLogLevel(logLevel: RemoteConfigLogLevel): void {\n    setLogLevel(this._delegate, logLevel);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { RemoteConfigCompatImpl, isSupported } from './remoteConfig';\nimport { name as packageName, version } from '../package.json';\nimport { RemoteConfig as RemoteConfigCompat } from '@firebase/remote-config-types';\n\nfunction registerRemoteConfigCompat(\n  firebaseInstance: _FirebaseNamespace\n): void {\n  firebaseInstance.INTERNAL.registerComponent(\n    new Component(\n      'remoteConfig-compat',\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    )\n      .setMultipleInstances(true)\n      .setServiceProps({ isSupported })\n  );\n\n  firebaseInstance.registerVersion(packageName, version);\n}\n\nfunction remoteConfigFactory(\n  container: ComponentContainer,\n  { instanceIdentifier: namespace }: InstanceFactoryOptions\n): RemoteConfigCompatImpl {\n  const app = container.getProvider('app-compat').getImmediate();\n  // The following call will always succeed because rc `import {...} from '@firebase/remote-config'`\n  const remoteConfig = container.getProvider('remote-config').getImmediate({\n    identifier: namespace\n  });\n\n  return new RemoteConfigCompatImpl(app, remoteConfig);\n}\n\nregisterRemoteConfigCompat(firebase as _FirebaseNamespace);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    remoteConfig: {\n      (app?: FirebaseApp): RemoteConfigCompat;\n    };\n  }\n  interface FirebaseApp {\n    remoteConfig(): RemoteConfigCompat;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}