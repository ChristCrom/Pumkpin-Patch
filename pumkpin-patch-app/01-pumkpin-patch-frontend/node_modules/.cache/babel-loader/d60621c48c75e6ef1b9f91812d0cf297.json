{"ast":null,"code":"import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, getGlobal, base64, issuedAtTime, calculateBackoffMillis, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst APP_CHECK_STATES = new Map();\nconst DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nconst DEBUG_STATE = {\n  initialized: false,\n  enabled: false\n};\n\nfunction getState(app) {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nfunction setState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n}\n\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1';\nconst EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\nconst EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD = 'exchangeRecaptchaEnterpriseToken';\nconst EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nconst TOKEN_REFRESH_TIME = {\n  /**\r\n   * The offset time before token natural expiration to run the refresh.\r\n   * This is currently 5 minutes.\r\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n\n  /**\r\n   * This is the first retrial wait after an error. This is currently\r\n   * 30 seconds.\r\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n\n  /**\r\n   * This is the maximum retrial wait, currently 16 minutes.\r\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n/**\r\n * One day in millis, for certain error code backoffs.\r\n */\n\nconst ONE_DAY = 24 * 60 * 60 * 1000;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\n\nclass Refresher {\n  constructor(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n\n  start() {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop() {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning() {\n    return !!this.pending;\n  }\n\n  async process(hasSucceeded) {\n    this.stop();\n\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded)); // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n      this.pending.resolve();\n      await this.pending.promise;\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  getNextRun(hasSucceeded) {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound; // Return typical wait duration interval after a successful operation.\n\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval; // Double interval for next consecutive error.\n\n      this.nextErrorWaitInterval *= 2; // Make sure next wait interval does not exceed the maximum upper bound.\n\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n\n      return currentErrorWaitInterval;\n    }\n  }\n\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERRORS = {\n  [\"already-initialized\"\n  /* ALREADY_INITIALIZED */\n  ]: 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' + 'different options. To avoid this error, call initializeAppCheck() with the ' + 'same options as when it was originally called. This will return the ' + 'already initialized instance.',\n  [\"use-before-activation\"\n  /* USE_BEFORE_ACTIVATION */\n  ]: 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' + 'Call initializeAppCheck() before instantiating other Firebase services.',\n  [\"fetch-network-error\"\n  /* FETCH_NETWORK_ERROR */\n  ]: 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.',\n  [\"fetch-parse-error\"\n  /* FETCH_PARSE_ERROR */\n  ]: 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.',\n  [\"fetch-status-error\"\n  /* FETCH_STATUS_ERROR */\n  ]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [\"storage-open\"\n  /* STORAGE_OPEN */\n  ]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\"\n  /* STORAGE_GET */\n  ]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\"\n  /* STORAGE_WRITE */\n  ]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"recaptcha-error\"\n  /* RECAPTCHA_ERROR */\n  ]: 'ReCAPTCHA error.',\n  [\"throttled\"\n  /* THROTTLED */\n  ]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\n};\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction getRecaptcha() {\n  let isEnterprise = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var _a;\n\n  if (isEnterprise) {\n    return (_a = self.grecaptcha) === null || _a === void 0 ? void 0 : _a.enterprise;\n  }\n\n  return self.grecaptcha;\n}\n\nfunction ensureActivated(app) {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\"\n    /* USE_BEFORE_ACTIVATION */\n    , {\n      appName: app.name\n    });\n  }\n}\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n */\n\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0,\n          v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction getDurationString(durationInMillis) {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor((totalSeconds - days * 3600 * 24 - hours * 3600) / 60);\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n  let result = '';\n\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value) {\n  if (value === 0) {\n    return '00';\n  }\n\n  return value >= 10 ? value.toString() : '0' + value;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function exchangeToken(_ref, heartbeatServiceProvider) {\n  let {\n    url,\n    body\n  } = _ref;\n\n  var _a, _b;\n\n  const headers = {\n    'Content-Type': 'application/json'\n  }; // If heartbeat service exists, add heartbeat header string to the header.\n\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n\n    if (heartbeatsHeader) {\n      headers['X-Firebase-Client'] = heartbeatsHeader;\n    }\n  }\n\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-network-error\"\n    /* FETCH_NETWORK_ERROR */\n    , {\n      originalErrorMessage: (_a = originalError) === null || _a === void 0 ? void 0 : _a.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(\"fetch-status-error\"\n    /* FETCH_STATUS_ERROR */\n    , {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody;\n\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\"\n    /* FETCH_PARSE_ERROR */\n    , {\n      originalErrorMessage: (_b = originalError) === null || _b === void 0 ? void 0 : _b.message\n    });\n  } // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n\n\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(\"fetch-parse-error\"\n    /* FETCH_PARSE_ERROR */\n    , {\n      originalErrorMessage: `ttl field (timeToLive) is not in standard Protobuf Duration ` + `format: ${responseBody.ttl}`\n    });\n  }\n\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n  const now = Date.now();\n  return {\n    token: responseBody.token,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nfunction getExchangeRecaptchaV3TokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_v3_token': reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeRecaptchaEnterpriseTokenRequest(app, reCAPTCHAToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  const {\n    projectId,\n    appId,\n    apiKey\n  } = app.options;\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\nlet dbPromise = null;\n\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    var _a;\n\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n\n      request.onerror = event => {\n        var _a;\n\n        reject(ERROR_FACTORY.create(\"storage-open\"\n        /* STORAGE_OPEN */\n        , {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n\n      request.onupgradeneeded = event => {\n        const db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    }\n  });\n  return dbPromise;\n}\n\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\n\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\n\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\n\nasync function write(key, value) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      var _a;\n\n      reject(ERROR_FACTORY.create(\"storage-set\"\n      /* STORAGE_WRITE */\n      , {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\n\nasync function read(key) {\n  const db = await getDBPromise();\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = event.target.result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      var _a;\n\n      reject(ERROR_FACTORY.create(\"storage-get\"\n      /* STORAGE_GET */\n      , {\n        originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    };\n  });\n}\n\nfunction computeKey(app) {\n  return `${app.options.appId}-${app.name}`;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst logger = new Logger('@firebase/app-check');\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\n\nasync function readTokenFromStorage(app) {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n\n    return token;\n  }\n\n  return undefined;\n}\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\n\n\nfunction writeTokenToStorage(app, token) {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nasync function readOrCreateDebugTokenFromStorage() {\n  /**\r\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\r\n   * But it won't happen here, because this function will be called exactly once.\r\n   */\n  let existingDebugToken = undefined;\n\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {// failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4(); // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n\n    writeDebugTokenToIndexedDB(newToken).catch(e => logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`));\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isDebugMode() {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nasync function getDebugToken() {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nfunction initializeDebugMode() {\n  const globals = getGlobal();\n  const debugState = getDebugState(); // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n\n  debugState.initialized = true;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\n\n\nconst defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\n\nfunction formatDummyToken(tokenErrorData) {\n  return base64.encodeString(JSON.stringify(tokenErrorData),\n  /* webSafe= */\n  false);\n}\n/**\r\n * This function always resolves.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\n\n\nasync function getToken$2(appCheck) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const app = appCheck.app;\n  ensureActivated(app);\n  const state = getState(app);\n  /**\r\n   * First check if there is a token in memory from a previous `getToken()` call.\r\n   */\n\n  let token = state.token;\n  let error = undefined;\n  /**\r\n   * If there is no token in memory, try to load token from indexedDB.\r\n   */\n\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n    }\n  } // Return the cached token (from either memory or indexedDB) if it's valid\n\n\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  } // Only set to true if this `getToken()` call is making the actual\n  // REST call to the exchange endpoint, versus waiting for an already\n  // in-flight call (see debug and regular exchange endpoint paths below)\n\n\n  let shouldCallListeners = false;\n  /**\r\n   * DEBUG MODE\r\n   * If debug mode is set, and there is no cached token, fetch a new App\r\n   * Check token using the debug token, and return it directly.\r\n   */\n\n  if (isDebugMode()) {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      state.exchangeTokenPromise = exchangeToken(getExchangeDebugTokenRequest(app, await getDebugToken()), appCheck.heartbeatServiceProvider).then(token => {\n        state.exchangeTokenPromise = undefined;\n        return token;\n      });\n      shouldCallListeners = true;\n    }\n\n    const tokenFromDebugExchange = await state.exchangeTokenPromise; // Write debug token to indexedDB.\n\n    await writeTokenToStorage(app, tokenFromDebugExchange); // Write debug token to state.\n\n    setState(app, Object.assign(Object.assign({}, state), {\n      token: tokenFromDebugExchange\n    }));\n    return {\n      token: tokenFromDebugExchange.token\n    };\n  }\n  /**\r\n   * request a new token\r\n   */\n\n\n  try {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      // state.provider is populated in initializeAppCheck()\n      // ensureActivated() at the top of this function checks that\n      // initializeAppCheck() has been called.\n      state.exchangeTokenPromise = state.provider.getToken().then(token => {\n        state.exchangeTokenPromise = undefined;\n        return token;\n      });\n      shouldCallListeners = true;\n    }\n\n    token = await state.exchangeTokenPromise;\n  } catch (e) {\n    if (e.code === `appCheck/${\"throttled\"\n    /* THROTTLED */\n    }`) {\n      // Warn if throttled, but do not treat it as an error.\n      logger.warn(e.message);\n    } else {\n      // `getToken()` should never throw, but logging error text to console will aid debugging.\n      logger.error(e);\n    } // Always save error to be added to dummy token.\n\n\n    error = e;\n  }\n\n  let interopTokenResult;\n\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    }; // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n\n    setState(app, Object.assign(Object.assign({}, state), {\n      token\n    }));\n    await writeTokenToStorage(app, token);\n  }\n\n  if (shouldCallListeners) {\n    notifyTokenListeners(app, interopTokenResult);\n  }\n\n  return interopTokenResult;\n}\n\nfunction addTokenListener(appCheck, type, listener, onError) {\n  const {\n    app\n  } = appCheck;\n  const state = getState(app);\n  const tokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  setState(app, Object.assign(Object.assign({}, state), {\n    tokenObservers: [...state.tokenObservers, tokenObserver]\n  })); // Invoke the listener async immediately if there is a valid token\n  // in memory.\n\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve().then(() => {\n      listener({\n        token: validToken.token\n      });\n      initTokenRefresher(appCheck);\n    }).catch(() => {\n      /* we don't care about exceptions thrown in listeners */\n    });\n  }\n  /**\r\n   * Wait for any cached token promise to resolve before starting the token\r\n   * refresher. The refresher checks to see if there is an existing token\r\n   * in state and calls the exchange endpoint if not. We should first let the\r\n   * IndexedDB check have a chance to populate state if it can.\r\n   *\r\n   * Listener call isn't needed here because cachedTokenPromise will call any\r\n   * listeners that exist when it resolves.\r\n   */\n  // state.cachedTokenPromise is always populated in `activate()`.\n\n\n  void state.cachedTokenPromise.then(() => initTokenRefresher(appCheck));\n}\n\nfunction removeTokenListener(app, listener) {\n  const state = getState(app);\n  const newObservers = state.tokenObservers.filter(tokenObserver => tokenObserver.next !== listener);\n\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, Object.assign(Object.assign({}, state), {\n    tokenObservers: newObservers\n  }));\n}\n/**\r\n * Logic to create and start refresher as needed.\r\n */\n\n\nfunction initTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  const state = getState(app); // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n\n  let refresher = state.tokenRefresher;\n\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    setState(app, Object.assign(Object.assign({}, state), {\n      tokenRefresher: refresher\n    }));\n  }\n\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck) {\n  const {\n    app\n  } = appCheck;\n  return new Refresher( // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  async () => {\n    const state = getState(app); // If there is no token, we will try to load it from storage and use it\n    // If there is a token, we force refresh it because we know it's going to expire soon\n\n    let result;\n\n    if (!state.token) {\n      result = await getToken$2(appCheck);\n    } else {\n      result = await getToken$2(appCheck, true);\n    } // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n\n\n    if (result.error) {\n      throw result.error;\n    }\n  }, () => {\n    return true;\n  }, () => {\n    const state = getState(app);\n\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      let nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000; // Do not allow refresh time to be past (expireTime - 5 minutes)\n\n      const latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\n\nfunction notifyTokenListeners(app, token) {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === \"EXTERNAL\"\n      /* EXTERNAL */\n      && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {// Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * AppCheck Service class.\r\n */\n\n\nclass AppCheckService {\n  constructor(app, heartbeatServiceProvider) {\n    this.app = app;\n    this.heartbeatServiceProvider = heartbeatServiceProvider;\n  }\n\n  _delete() {\n    const {\n      tokenObservers\n    } = getState(this.app);\n\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nfunction factory(app, heartbeatServiceProvider) {\n  return new AppCheckService(app, heartbeatServiceProvider);\n}\n\nfunction internalFactory(appCheck) {\n  return {\n    getToken: forceRefresh => getToken$2(appCheck, forceRefresh),\n    addTokenListener: listener => addTokenListener(appCheck, \"INTERNAL\"\n    /* INTERNAL */\n    , listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n\nconst name = \"@firebase/app-check\";\nconst version = \"0.5.9\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nconst RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js';\n\nfunction initializeV3(app, siteKey) {\n  const state = getState(app);\n  const initialized = new Deferred();\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: {\n      initialized\n    }\n  }));\n  const divId = makeDiv(app);\n  const grecaptcha = getRecaptcha(false);\n\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n\n  return initialized.promise;\n}\n\nfunction initializeEnterprise(app, siteKey) {\n  const state = getState(app);\n  const initialized = new Deferred();\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: {\n      initialized\n    }\n  }));\n  const divId = makeDiv(app);\n  const grecaptcha = getRecaptcha(true);\n\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n\n  return initialized.promise;\n}\n/**\r\n * Add listener to render the widget and resolve the promise when\r\n * the grecaptcha.ready() event fires.\r\n */\n\n\nfunction queueWidgetRender(app, siteKey, grecaptcha, container, initialized) {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n/**\r\n * Add invisible div to page.\r\n */\n\n\nfunction makeDiv(app) {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nasync function getToken$1(app) {\n  ensureActivated(app); // ensureActivated() guarantees that reCAPTCHAState is set\n\n  const reCAPTCHAState = getState(app).reCAPTCHAState;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState;\n    recaptcha.ready(() => {\n      resolve( // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n      recaptcha.execute(reCAPTCHAState.widgetId, {\n        action: 'fire_app_check'\n      }));\n    });\n  });\n}\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\n\n\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n  const state = getState(app);\n  setState(app, Object.assign(Object.assign({}, state), {\n    reCAPTCHAState: Object.assign(Object.assign({}, state.reCAPTCHAState), {\n      // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    })\n  }));\n}\n\nfunction loadReCAPTCHAV3Script(onload) {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload) {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\n\n\nclass ReCaptchaV3Provider {\n  /**\r\n   * Create a ReCaptchaV3Provider instance.\r\n   * @param siteKey - ReCAPTCHA V3 siteKey.\r\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  async getToken() {\n    var _a;\n\n    throwIfThrottled(this._throttleData); // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n\n    const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(\"recaptcha-error\"\n      /* RECAPTCHA_ERROR */\n      );\n    });\n    let result;\n\n    try {\n      result = await exchangeToken(getExchangeRecaptchaV3TokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\n    } catch (e) {\n      if (e.code === \"fetch-status-error\"\n      /* FETCH_STATUS_ERROR */\n      ) {\n        this._throttleData = setBackoff(Number((_a = e.customData) === null || _a === void 0 ? void 0 : _a.httpStatus), this._throttleData);\n        throw ERROR_FACTORY.create(\"throttled\"\n        /* THROTTLED */\n        , {\n          time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    } // If successful, clear throttle data.\n\n\n    this._throttleData = null;\n    return result;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\n\n\nclass ReCaptchaEnterpriseProvider {\n  /**\r\n   * Create a ReCaptchaEnterpriseProvider instance.\r\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\r\n   */\n  constructor(_siteKey) {\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  async getToken() {\n    var _a;\n\n    throwIfThrottled(this._throttleData); // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n\n    const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\n      // reCaptcha.execute() throws null which is not very descriptive.\n      throw ERROR_FACTORY.create(\"recaptcha-error\"\n      /* RECAPTCHA_ERROR */\n      );\n    });\n    let result;\n\n    try {\n      result = await exchangeToken(getExchangeRecaptchaEnterpriseTokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\n    } catch (e) {\n      if (e.code === \"fetch-status-error\"\n      /* FETCH_STATUS_ERROR */\n      ) {\n        this._throttleData = setBackoff(Number((_a = e.customData) === null || _a === void 0 ? void 0 : _a.httpStatus), this._throttleData);\n        throw ERROR_FACTORY.create(\"throttled\"\n        /* THROTTLED */\n        , {\n          time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    } // If successful, clear throttle data.\n\n\n    this._throttleData = null;\n    return result;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * Custom provider class.\r\n * @public\r\n */\n\n\nclass CustomProvider {\n  constructor(_customProviderOptions) {\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  async getToken() {\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken(); // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token); // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n\n    const issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n    return Object.assign(Object.assign({}, customToken), {\n      issuedAtTimeMillis\n    });\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  initialize(app) {\n    this._app = app;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  isEqual(otherProvider) {\n    if (otherProvider instanceof CustomProvider) {\n      return this._customProviderOptions.getToken.toString() === otherProvider._customProviderOptions.getToken.toString();\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\r\n * Set throttle data to block requests until after a certain time\r\n * depending on the failed request's status code.\r\n * @param httpStatus - Status code of failed request.\r\n * @param throttleData - `ThrottleData` object containing previous throttle\r\n * data state.\r\n * @returns Data about current throttle state and expiration time.\r\n */\n\n\nfunction setBackoff(httpStatus, throttleData) {\n  /**\r\n   * Block retries for 1 day for the following error codes:\r\n   *\r\n   * 404: Likely malformed URL.\r\n   *\r\n   * 403:\r\n   * - Attestation failed\r\n   * - Wrong API key\r\n   * - Project deleted\r\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\r\n     * For all other error codes, the time when it is ok to retry again\r\n     * is based on exponential backoff.\r\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData) {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(\"throttled\"\n      /* THROTTLED */\n      , {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Activate App Check for the given app. Can be called only once per app.\r\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\r\n * @param options - App Check initialization options\r\n * @public\r\n */\n\n\nfunction initializeAppCheck() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let options = arguments.length > 1 ? arguments[1] : undefined;\n  app = getModularInstance(app);\n\n  const provider = _getProvider(app, 'app-check'); // Ensure initializeDebugMode() is only called once.\n\n\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  } // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n\n\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token => // Not using logger because I don't think we ever want this accidentally hidden.\n    console.log(`App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`));\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions();\n\n    if (initialOptions.isTokenAutoRefreshEnabled === options.isTokenAutoRefreshEnabled && initialOptions.provider.isEqual(options.provider)) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\"\n      /* ALREADY_INITIALIZED */\n      , {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({\n    options\n  });\n\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled); // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n\n\n  if (getState(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, \"INTERNAL\"\n    /* INTERNAL */\n    , () => {});\n  }\n\n  return appCheck;\n}\n/**\r\n * Activate App Check\r\n * @param app - Firebase app to activate App Check for.\r\n * @param provider - reCAPTCHA v3 provider or\r\n * custom token provider.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. If undefined, defaults to the\r\n * value of `app.automaticDataCollectionEnabled`, which defaults to\r\n * false and can be set in the app config.\r\n */\n\n\nfunction _activate(app, provider, isTokenAutoRefreshEnabled) {\n  const state = getState(app);\n  const newState = Object.assign(Object.assign({}, state), {\n    activated: true\n  });\n  newState.provider = provider; // Read cached token from storage if it exists and store it in memory.\n\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, Object.assign(Object.assign({}, getState(app)), {\n        token: cachedToken\n      })); // notify all listeners with the cached token\n\n      notifyTokenListeners(app, {\n        token: cachedToken.token\n      });\n    }\n\n    return cachedToken;\n  }); // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n\n  newState.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;\n  setState(app, newState);\n  newState.provider.initialize(app);\n}\n/**\r\n * Set whether App Check will automatically refresh tokens as needed.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. This overrides any value set\r\n * during `initializeAppCheck()`.\r\n * @public\r\n */\n\n\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\n  const app = appCheckInstance.app;\n  const state = getState(app); // This will exist if any product libraries have called\n  // `addTokenListener()`\n\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n\n  setState(app, Object.assign(Object.assign({}, state), {\n    isTokenAutoRefreshEnabled\n  }));\n}\n/**\r\n * Get the current App Check token. Attaches to the most recent\r\n * in-flight request if one is present. Returns null if no token\r\n * is present and no token requests are in-flight.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param forceRefresh - If true, will always try to fetch a fresh token.\r\n * If false, will use a cached token if found in storage.\r\n * @public\r\n */\n\n\nasync function getToken(appCheckInstance, forceRefresh) {\n  const result = await getToken$2(appCheckInstance, forceRefresh);\n\n  if (result.error) {\n    throw result.error;\n  }\n\n  return {\n    token: result.token\n  };\n}\n/**\r\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\r\n * pattern for public use.\r\n */\n\n\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError,\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  let nextFn = () => {};\n\n  let errorFn = () => {};\n\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n\n  addTokenListener(appCheckInstance, \"EXTERNAL\"\n  /* EXTERNAL */\n  , nextFn, errorFn);\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n/**\r\n * Firebase App Check\r\n *\r\n * @packageDocumentation\r\n */\n\n\nconst APP_CHECK_NAME = 'app-check';\nconst APP_CHECK_NAME_INTERNAL = 'app-check-internal';\n\nfunction registerAppCheck() {\n  // The public interface\n  _registerComponent(new Component(APP_CHECK_NAME, container => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    const heartbeatServiceProvider = container.getProvider('heartbeat');\n    return factory(app, heartbeatServiceProvider);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  )\n  /**\r\n   * Initialize app-check-internal after app-check is initialized to make AppCheck available to\r\n   * other Firebase SDKs\r\n   */\n  .setInstanceCreatedCallback((container, _identifier, _appcheckService) => {\n    container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n  })); // The internal interface used by other Firebase products\n\n\n  _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, container => {\n    const appCheck = container.getProvider('app-check').getImmediate();\n    return internalFactory(appCheck);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  ));\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\nexport { CustomProvider, ReCaptchaEnterpriseProvider, ReCaptchaV3Provider, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };","map":{"version":3,"mappings":"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","names":["APP_CHECK_STATES","Map","DEFAULT_STATE","activated","tokenObservers","DEBUG_STATE","initialized","enabled","getState","app","get","state","set","getDebugState","BASE_ENDPOINT","EXCHANGE_RECAPTCHA_TOKEN_METHOD","EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD","EXCHANGE_DEBUG_TOKEN_METHOD","TOKEN_REFRESH_TIME","OFFSET_DURATION","RETRIAL_MIN_WAIT","RETRIAL_MAX_WAIT","ONE_DAY","Refresher","constructor","retryPolicy","getWaitDuration","lowerBound","upperBound","operation","pending","nextErrorWaitInterval","Error","start","process","catch","stop","reject","isRunning","hasSucceeded","Deferred","sleep","getNextRun","resolve","promise","error","currentErrorWaitInterval","ms","Promise","setTimeout","ERRORS","ERROR_FACTORY","ErrorFactory","isEnterprise","grecaptcha","_a","enterprise","self","ensureActivated","create","appName","name","uuidv4","replace","c","r","Math","random","v","toString","getDurationString","durationInMillis","totalSeconds","round","days","floor","hours","minutes","seconds","result","pad","value","exchangeToken","heartbeatServiceProvider","url","body","headers","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","options","method","JSON","stringify","response","fetch","originalError","originalErrorMessage","message","status","httpStatus","responseBody","json","_b","match","ttl","isNaN","Number","timeToLiveAsNumber","now","Date","token","expireTimeMillis","issuedAtTimeMillis","reCAPTCHAToken","projectId","appId","apiKey","debugToken","debug_token","DB_NAME","DB_VERSION","STORE_NAME","DEBUG_TOKEN_KEY","dbPromise","getDBPromise","request","indexedDB","open","onsuccess","event","target","onerror","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","e","readTokenFromIndexedDB","read","computeKey","write","writeDebugTokenToIndexedDB","readDebugTokenFromIndexedDB","key","transaction","store","objectStore","put","compositeKey","_event","undefined","logger","Logger","readTokenFromStorage","isIndexedDBAvailable","warn","writeTokenToIndexedDB","readOrCreateDebugTokenFromStorage","existingDebugToken","_e","newToken","isDebugMode","debugState","getDebugToken","initializeDebugMode","globals","getGlobal","FIREBASE_APPCHECK_DEBUG_TOKEN","deferredToken","defaultTokenErrorData","formatDummyToken","tokenErrorData","base64","encodeString","getToken","appCheck","forceRefresh","cachedToken","cachedTokenPromise","isValid","shouldCallListeners","exchangeTokenPromise","getExchangeDebugTokenRequest","then","tokenFromDebugExchange","writeTokenToStorage","setState","Object","provider","code","interopTokenResult","makeDummyTokenResult","notifyTokenListeners","addTokenListener","type","listener","onError","tokenObserver","next","validToken","initTokenRefresher","newObservers","filter","length","tokenRefresher","refresher","createTokenRefresher","isTokenAutoRefreshEnabled","nextRefreshTimeMillis","latestAllowableRefresh","min","max","observers","observer","AppCheckService","_delete","removeTokenListener","internalFactory","RECAPTCHA_URL","RECAPTCHA_ENTERPRISE_URL","siteKey","reCAPTCHAState","divId","makeDiv","getRecaptcha","loadReCAPTCHAV3Script","queueWidgetRender","loadReCAPTCHAEnterpriseScript","container","ready","renderInvisibleWidget","invisibleDiv","document","createElement","id","style","display","appendChild","recaptcha","_reject","execute","widgetId","action","render","sitekey","size","onload","script","src","head","ReCaptchaV3Provider","_siteKey","_throttleData","throwIfThrottled","attestedClaimsToken","getReCAPTCHAToken","_app","getExchangeRecaptchaV3TokenRequest","_heartbeatServiceProvider","setBackoff","customData","time","allowRequestsAfter","initialize","_getProvider","initializeRecaptchaV3","isEqual","otherProvider","ReCaptchaEnterpriseProvider","getExchangeRecaptchaEnterpriseTokenRequest","initializeRecaptchaEnterprise","CustomProvider","_customProviderOptions","customToken","issuedAtTimeSeconds","issuedAtTime","throttleData","backoffCount","backoffMillis","calculateBackoffMillis","initializeAppCheck","getApp","getModularInstance","console","log","isInitialized","existingInstance","initialOptions","getOptions","_activate","newState","automaticDataCollectionEnabled","appCheckInstance","getTokenInternal","onTokenChanged","onNextOrObserver","onCompletion","nextFn","errorFn","bind","APP_CHECK_NAME","APP_CHECK_NAME_INTERNAL","registerAppCheck","_registerComponent","Component","getProvider","factory","setInstantiationMode","setInstanceCreatedCallback","_identifier","_appcheckService","registerVersion","version"],"sources":["../../src/state.ts","../../src/constants.ts","../../src/proactive-refresh.ts","../../src/errors.ts","../../src/util.ts","../../src/client.ts","../../src/indexeddb.ts","../../src/logger.ts","../../src/storage.ts","../../src/debug.ts","../../src/internal-api.ts","../../src/factory.ts","../../src/recaptcha.ts","../../src/providers.ts","../../src/api.ts","../../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckProvider,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver\n} from './types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProvider;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  exchangeTokenPromise?: Promise<AppCheckTokenInternal>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n}\n\nexport interface DebugState {\n  initialized: boolean;\n  enabled: boolean;\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  initialized: false,\n  enabled: false\n};\n\nexport function getState(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\n}\n\nexport function setState(app: FirebaseApp, state: AppCheckState): void {\n  APP_CHECK_STATES.set(app, state);\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n  DEBUG_STATE.initialized = false;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\nexport const EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD =\n  'exchangeRecaptchaEnterpriseToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n\n/**\n * One day in millis, for certain error code backoffs.\n */\nexport const ONE_DAY = 24 * 60 * 60 * 1000;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_INITIALIZED = 'already-initialized',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error',\n  THROTTLED = 'throttled'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_INITIALIZED]:\n    'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' +\n    'different options. To avoid this error, call initializeAppCheck() with the ' +\n    'same options as when it was originally called. This will return the ' +\n    'already initialized instance.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' +\n    'Call initializeAppCheck() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.',\n  [AppCheckError.THROTTLED]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_INITIALIZED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n  [AppCheckError.THROTTLED]: { time: string; httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getState } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getRecaptcha(\n  isEnterprise: boolean = false\n): GreCAPTCHA | undefined {\n  if (isEnterprise) {\n    return self.grecaptcha?.enterprise;\n  }\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getState(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\n/**\n * Copied from https://stackoverflow.com/a/2117523\n */\nexport function uuidv4(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport function getDurationString(durationInMillis: number): string {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor(\n    (totalSeconds - days * 3600 * 24 - hours * 3600) / 60\n  );\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n\n  let result = '';\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value: number): string {\n  if (value === 0) {\n    return '00';\n  }\n  return value >= 10 ? value.toString() : '0' + value;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  token: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  heartbeatServiceProvider: Provider<'heartbeat'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If heartbeat service exists, add heartbeat header string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers['X-Firebase-Client'] = heartbeatsHeader;\n    }\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: (originalError as Error)?.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: (originalError as Error)?.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.token,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaV3TokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_v3_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeRecaptchaEnterpriseTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './types';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: (e as Error)?.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { uuidv4 } from './util';\nimport { FirebaseApp } from '@firebase/app';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`)\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  const debugState = getDebugState();\n  // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n  debugState.initialized = true;\n\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckTokenResult,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  ListenerType\n} from './types';\nimport { AppCheckTokenListener } from './public-types';\nimport { getState, setState } from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { base64, FirebaseError } from '@firebase/util';\nimport { logger } from './logger';\nimport { AppCheckService } from './factory';\nimport { AppCheckError } from './errors';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n\n/**\n * This function always resolves.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  appCheck: AppCheckService,\n  forceRefresh = false\n): Promise<AppCheckTokenResult> {\n  const app = appCheck.app;\n  ensureActivated(app);\n\n  const state = getState(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If there is no token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken && isValid(cachedToken)) {\n      token = cachedToken;\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  // Only set to true if this `getToken()` call is making the actual\n  // REST call to the exchange endpoint, versus waiting for an already\n  // in-flight call (see debug and regular exchange endpoint paths below)\n  let shouldCallListeners = false;\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      state.exchangeTokenPromise = exchangeToken(\n        getExchangeDebugTokenRequest(app, await getDebugToken()),\n        appCheck.heartbeatServiceProvider\n      ).then(token => {\n        state.exchangeTokenPromise = undefined;\n        return token;\n      });\n      shouldCallListeners = true;\n    }\n    const tokenFromDebugExchange: AppCheckTokenInternal =\n      await state.exchangeTokenPromise;\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    setState(app, { ...state, token: tokenFromDebugExchange });\n    return { token: tokenFromDebugExchange.token };\n  }\n\n  /**\n   * request a new token\n   */\n  try {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      // state.provider is populated in initializeAppCheck()\n      // ensureActivated() at the top of this function checks that\n      // initializeAppCheck() has been called.\n      state.exchangeTokenPromise = state.provider!.getToken().then(token => {\n        state.exchangeTokenPromise = undefined;\n        return token;\n      });\n      shouldCallListeners = true;\n    }\n    token = await state.exchangeTokenPromise;\n  } catch (e) {\n    if ((e as FirebaseError).code === `appCheck/${AppCheckError.THROTTLED}`) {\n      // Warn if throttled, but do not treat it as an error.\n      logger.warn((e as FirebaseError).message);\n    } else {\n      // `getToken()` should never throw, but logging error text to console will aid debugging.\n      logger.error(e);\n    }\n    // Always save error to be added to dummy token.\n    error = e as FirebaseError;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // if token is undefined, there must be an error.\n    // we return a dummy token along with the error\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    setState(app, { ...state, token });\n    await writeTokenToStorage(app, token);\n  }\n\n  if (shouldCallListeners) {\n    notifyTokenListeners(app, interopTokenResult);\n  }\n  return interopTokenResult;\n}\n\nexport function addTokenListener(\n  appCheck: AppCheckService,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const { app } = appCheck;\n  const state = getState(app);\n  const tokenObserver: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  setState(app, {\n    ...state,\n    tokenObservers: [...state.tokenObservers, tokenObserver]\n  });\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => {\n        listener({ token: validToken.token });\n        initTokenRefresher(appCheck);\n      })\n      .catch(() => {\n        /* we don't care about exceptions thrown in listeners */\n      });\n  }\n\n  /**\n   * Wait for any cached token promise to resolve before starting the token\n   * refresher. The refresher checks to see if there is an existing token\n   * in state and calls the exchange endpoint if not. We should first let the\n   * IndexedDB check have a chance to populate state if it can.\n   *\n   * Listener call isn't needed here because cachedTokenPromise will call any\n   * listeners that exist when it resolves.\n   */\n\n  // state.cachedTokenPromise is always populated in `activate()`.\n  void state.cachedTokenPromise!.then(() => initTokenRefresher(appCheck));\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: AppCheckTokenListener\n): void {\n  const state = getState(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  setState(app, {\n    ...state,\n    tokenObservers: newObservers\n  });\n}\n\n/**\n * Logic to create and start refresher as needed.\n */\nfunction initTokenRefresher(appCheck: AppCheckService): void {\n  const { app } = appCheck;\n  const state = getState(app);\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  let refresher: Refresher | undefined = state.tokenRefresher;\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    setState(app, { ...state, tokenRefresher: refresher });\n  }\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck: AppCheckService): Refresher {\n  const { app } = appCheck;\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getState(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(appCheck);\n      } else {\n        result = await getToken(appCheck, true);\n      }\n\n      // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\n      if (result.error) {\n        throw result.error;\n      }\n    },\n    () => {\n      return true;\n    },\n    () => {\n      const state = getState(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nexport function notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getState(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheck } from './public-types';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { FirebaseAppCheckInternal, ListenerType } from './types';\nimport {\n  getToken,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { getState } from './state';\n\n/**\n * AppCheck Service class.\n */\nexport class AppCheckService implements AppCheck, _FirebaseService {\n  constructor(\n    public app: FirebaseApp,\n    public heartbeatServiceProvider: Provider<'heartbeat'>\n  ) {}\n  _delete(): Promise<void> {\n    const { tokenObservers } = getState(this.app);\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n    return Promise.resolve();\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  heartbeatServiceProvider: Provider<'heartbeat'>\n): AppCheckService {\n  return new AppCheckService(app, heartbeatServiceProvider);\n}\n\nexport function internalFactory(\n  appCheck: AppCheckService\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh => getToken(appCheck, forceRefresh),\n    addTokenListener: listener =>\n      addTokenListener(appCheck, ListenerType.INTERNAL, listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { getState, setState } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nexport const RECAPTCHA_ENTERPRISE_URL =\n  'https://www.google.com/recaptcha/enterprise.js';\n\nexport function initializeV3(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(false);\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\nexport function initializeEnterprise(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const state = getState(app);\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  setState(app, { ...state, reCAPTCHAState: { initialized } });\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(true);\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\n\n/**\n * Add listener to render the widget and resolve the promise when\n * the grecaptcha.ready() event fires.\n */\nfunction queueWidgetRender(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string,\n  initialized: Deferred<GreCAPTCHA>\n): void {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n\n/**\n * Add invisible div to page.\n */\nfunction makeDiv(app: FirebaseApp): string {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getState(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getState(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n\n  const state = getState(app);\n\n  setState(app, {\n    ...state,\n    reCAPTCHAState: {\n      ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n      widgetId\n    }\n  });\n}\n\nfunction loadReCAPTCHAV3Script(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHATopLevel | undefined;\n  }\n}\n\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\n  enterprise: GreCAPTCHA;\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _getProvider } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport {\n  FirebaseError,\n  issuedAtTime,\n  calculateBackoffMillis\n} from '@firebase/util';\nimport {\n  exchangeToken,\n  getExchangeRecaptchaEnterpriseTokenRequest,\n  getExchangeRecaptchaV3TokenRequest\n} from './client';\nimport { ONE_DAY } from './constants';\nimport { AppCheckError, ERROR_FACTORY } from './errors';\nimport { CustomProviderOptions } from './public-types';\nimport {\n  getToken as getReCAPTCHAToken,\n  initializeV3 as initializeRecaptchaV3,\n  initializeEnterprise as initializeRecaptchaEnterprise\n} from './recaptcha';\nimport { AppCheckProvider, AppCheckTokenInternal, ThrottleData } from './types';\nimport { getDurationString } from './util';\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaV3Provider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _heartbeatServiceProvider?: Provider<'heartbeat'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaV3TokenRequest(this._app!, attestedClaimsToken),\n        this._heartbeatServiceProvider!\n      );\n    } catch (e) {\n      if ((e as FirebaseError).code === AppCheckError.FETCH_STATUS_ERROR) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeRecaptchaV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaEnterpriseProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _heartbeatServiceProvider?: Provider<'heartbeat'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaEnterpriseProvider instance.\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaEnterpriseTokenRequest(\n          this._app!,\n          attestedClaimsToken\n        ),\n        this._heartbeatServiceProvider!\n      );\n    } catch (e) {\n      if ((e as FirebaseError).code === AppCheckError.FETCH_STATUS_ERROR) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeRecaptchaEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Custom provider class.\n * @public\n */\nexport class CustomProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof CustomProvider) {\n      return (\n        this._customProviderOptions.getToken.toString() ===\n        otherProvider._customProviderOptions.getToken.toString()\n      );\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Set throttle data to block requests until after a certain time\n * depending on the failed request's status code.\n * @param httpStatus - Status code of failed request.\n * @param throttleData - `ThrottleData` object containing previous throttle\n * data state.\n * @returns Data about current throttle state and expiration time.\n */\nfunction setBackoff(\n  httpStatus: number,\n  throttleData: ThrottleData | null\n): ThrottleData {\n  /**\n   * Block retries for 1 day for the following error codes:\n   *\n   * 404: Likely malformed URL.\n   *\n   * 403:\n   * - Attestation failed\n   * - Wrong API key\n   * - Project deleted\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\n     * For all other error codes, the time when it is ok to retry again\n     * is based on exponential backoff.\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData: ThrottleData | null): void {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheck,\n  AppCheckOptions,\n  AppCheckTokenResult,\n  Unsubscribe,\n  PartialObserver\n} from './public-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { getState, setState, AppCheckState, getDebugState } from './state';\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { getModularInstance, ErrorFn, NextFn } from '@firebase/util';\nimport { AppCheckService } from './factory';\nimport { AppCheckProvider, ListenerType } from './types';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid,\n  notifyTokenListeners\n} from './internal-api';\nimport { readTokenFromStorage } from './storage';\nimport { getDebugToken, initializeDebugMode, isDebugMode } from './debug';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'app-check': AppCheckService;\n  }\n}\n\nexport {\n  ReCaptchaV3Provider,\n  CustomProvider,\n  ReCaptchaEnterpriseProvider\n} from './providers';\n\n/**\n * Activate App Check for the given app. Can be called only once per app.\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\n * @param options - App Check initialization options\n * @public\n */\nexport function initializeAppCheck(\n  app: FirebaseApp = getApp(),\n  options: AppCheckOptions\n): AppCheck {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'app-check');\n\n  // Ensure initializeDebugMode() is only called once.\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  }\n\n  // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token =>\n      // Not using logger because I don't think we ever want this accidentally hidden.\n      console.log(\n        `App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`\n      )\n    );\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions() as unknown as AppCheckOptions;\n    if (\n      initialOptions.isTokenAutoRefreshEnabled ===\n        options.isTokenAutoRefreshEnabled &&\n      initialOptions.provider.isEqual(options.provider)\n    ) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AppCheckError.ALREADY_INITIALIZED, {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({ options });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n  // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n  if (getState(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, ListenerType.INTERNAL, () => {});\n  }\n\n  return appCheck;\n}\n\n/**\n * Activate App Check\n * @param app - Firebase app to activate App Check for.\n * @param provider - reCAPTCHA v3 provider or\n * custom token provider.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. If undefined, defaults to the\n * value of `app.automaticDataCollectionEnabled`, which defaults to\n * false and can be set in the app config.\n */\nfunction _activate(\n  app: FirebaseApp,\n  provider: AppCheckProvider,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  const state = getState(app);\n\n  const newState: AppCheckState = { ...state, activated: true };\n  newState.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  newState.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      setState(app, { ...getState(app), token: cachedToken });\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: cachedToken.token });\n    }\n    return cachedToken;\n  });\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  newState.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  setState(app, newState);\n\n  newState.provider.initialize(app);\n}\n\n/**\n * Set whether App Check will automatically refresh tokens as needed.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. This overrides any value set\n * during `initializeAppCheck()`.\n * @public\n */\nexport function setTokenAutoRefreshEnabled(\n  appCheckInstance: AppCheck,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const app = appCheckInstance.app;\n  const state = getState(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  setState(app, { ...state, isTokenAutoRefreshEnabled });\n}\n/**\n * Get the current App Check token. Attaches to the most recent\n * in-flight request if one is present. Returns null if no token\n * is present and no token requests are in-flight.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param forceRefresh - If true, will always try to fetch a fresh token.\n * If false, will use a cached token if found in storage.\n * @public\n */\nexport async function getToken(\n  appCheckInstance: AppCheck,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    appCheckInstance as AppCheckService,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  return { token: result.token };\n}\n\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param observer - An object with `next`, `error`, and `complete`\n * properties. `next` is called with an\n * {@link AppCheckTokenResult}\n * whenever the token changes. `error` is optional and is called if an\n * error is thrown by the listener (the `next` function). `complete`\n * is unused, as the token stream is unending.\n *\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param onNext - When the token changes, this function is called with aa\n * {@link AppCheckTokenResult}.\n * @param onError - Optional. Called if there is an error thrown by the\n * listener (the `onNext` function).\n * @param onCompletion - Currently unused, as the token stream is unending.\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\n/**\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\n * pattern for public use.\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    appCheckInstance as AppCheckService,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n","/**\n * Firebase App Check\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { _AppCheckComponentName } from './public-types';\nimport { factory, internalFactory } from './factory';\nimport { _AppCheckInternalComponentName } from './types';\nimport { name, version } from '../package.json';\n\n// Used by other Firebase packages.\nexport { _AppCheckInternalComponentName };\n\nexport * from './api';\nexport * from './public-types';\n\nconst APP_CHECK_NAME: _AppCheckComponentName = 'app-check';\nconst APP_CHECK_NAME_INTERNAL: _AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(): void {\n  // The public interface\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const heartbeatServiceProvider = container.getProvider('heartbeat');\n        return factory(app, heartbeatServiceProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Initialize app-check-internal after app-check is initialized to make AppCheck available to\n       * other Firebase SDKs\n       */\n      .setInstanceCreatedCallback(\n        (container, _identifier, _appcheckService) => {\n          container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        const appCheck = container.getProvider('app-check').getImmediate();\n        return internalFactory(appCheck);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\n"]},"metadata":{},"sourceType":"module"}